apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
spec:
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      containers:
        - name: mongodb
          image: mongo:4.4
          resources:
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 27017
          envFrom:
            - configMapRef:
                name: mongodb-config
          volumeMounts:
            - name: mongodb-data
              mountPath: /data/db
            - name: mongodb-configdb
              mountPath: /data/configdb
      volumes:
        - name: mongodb-data
          persistentVolumeClaim:
            claimName: mongodb-data-pvc
        - name: mongodb-configdb
          persistentVolumeClaim:
            claimName: mongodb-config-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
spec:
  selector:
    matchLabels:
      app: minio
  template:
    metadata:
      labels:
        app: minio
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
        runAsGroup: 1000
      containers:
        - name: minio
          image: minio/minio:RELEASE.2024-09-22T00-33-43Z-cpuv1
          imagePullPolicy: IfNotPresent
          args: ["server", "/data", "--console-address", ":9001"]
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          ports:
            - containerPort: 9000
              name: api
            - containerPort: 9001
              name: console
          envFrom:
            - configMapRef:
                name: minio-config
          volumeMounts:
            - name: minio-data
              mountPath: /data
      volumes:
        - name: minio-data
          persistentVolumeClaim:
            claimName: minio-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi
spec:
  selector:
    matchLabels:
      app: fastapi
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: fastapi
    spec:
      terminationGracePeriodSeconds: 30
      restartPolicy: Always
      initContainers:
        - name: wait-for-dependencies
          image: alpine:latest
          command: [
                    "sh",
                    "-c",
                    'apk add --no-cache curl netcat-openbsd;
                    
                    # First check service existence
                    echo "Verifying service DNS resolution...";
                    MINIO_RESOLVED=$(getent hosts minio | wc -l);
                    MONGODB_RESOLVED=$(getent hosts mongodb | wc -l);
                    
                    if [ "$MINIO_RESOLVED" -eq "0" ]; then
                      echo "WARNING: MinIO service not found in DNS";
                    else
                      echo "MinIO service found in DNS";
                    fi;
                    
                    if [ "$MONGODB_RESOLVED" -eq "0" ]; then
                      echo "WARNING: MongoDB service not found in DNS";
                    else
                      echo "MongoDB service found in DNS";
                    fi;
                    
                    # Max 10 attempts (50 seconds total) instead of 20
                    MAX_ATTEMPTS=10;
                    
                    # Check MinIO
                    echo "Checking MinIO availability...";
                    for i in $(seq 1 $MAX_ATTEMPTS); do
                      if curl -s -m 2 http://minio:9000/minio/health/live > /dev/null || curl -s -m 2 http://minio:9000 > /dev/null; then
                        echo "MinIO is responding";
                        MINIO_READY=true;
                        break;
                      fi;
                      echo "MinIO check attempt $i/$MAX_ATTEMPTS failed, retrying...";
                      sleep 5;
                    done;
                    
                    # Check MongoDB 
                    echo "Checking MongoDB availability...";
                    for i in $(seq 1 $MAX_ATTEMPTS); do
                      if nc -z -w2 mongodb 27017; then
                        echo "MongoDB is responding";
                        MONGODB_READY=true;
                        break;
                      fi;
                      echo "MongoDB check attempt $i/$MAX_ATTEMPTS failed, retrying...";
                      sleep 5;
                    done;
                    
                    # Continue regardless of results
                    echo "Dependency checks completed, proceeding with FastAPI startup"'
                ]
      containers:
        - name: fastapi
          image: e3tow1c/ipcam-fastapi:1.4
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 5"]
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
          ports:
            - containerPort: 8000
          envFrom:
            - configMapRef:
                name: fastapi-config
          readinessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 20
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 5
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /
              port: 8000
            initialDelaySeconds: 15
            failureThreshold: 30
            periodSeconds: 10
            timeoutSeconds: 5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      terminationGracePeriodSeconds: 30
      containers:
      - name: frontend
        image: e3tow1c/frontend:1.1
        imagePullPolicy: IfNotPresent
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        envFrom:
          - configMapRef:
              name: frontend-config
        ports:
        - containerPort: 3000
